// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// String inserted does not match string in cell value text box
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheetWindow.UICellValueBoxWindow.UICellValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueBox' text box equals '5+5'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "String inserted does not match cell value box string");
        }
        
        /// <summary>
        /// Insert string 5+5 into cell
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uICellContentsValueEdit = this.UISpreadsheetWindow.UICellContentsValueWindow.UICellContentsValueEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\cs3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISpreadsheetWindowExePath, this.RecordedMethod1Params.UISpreadsheetWindowAlternateExePath);

            // Type '5+5' in 'cellContentsValue' text box
            uICellContentsValueEdit.Text = this.RecordedMethod1Params.UICellContentsValueEditText;

            // Type '{Enter}' in 'cellContentsValue' text box
            Keyboard.SendKeys(uICellContentsValueEdit, this.RecordedMethod1Params.UICellContentsValueEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 39));
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals '5+5'
        /// </summary>
        public string UICellValueBoxEditText = "5+5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\tobin\\Source\\Repos\\cs3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshe" +
            "etGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\cs3500\Spreadsheet\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\cs3500\\Spreadsheet\\SpreadsheetGUI\\bin\\Debug\\Spreadshee" +
            "tGUI.exe";
        
        /// <summary>
        /// Type '5+5' in 'cellContentsValue' text box
        /// </summary>
        public string UICellContentsValueEditText = "5+5";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsValue' text box
        /// </summary>
        public string UICellContentsValueEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UICellContentsValueWindow UICellContentsValueWindow
        {
            get
            {
                if ((this.mUICellContentsValueWindow == null))
                {
                    this.mUICellContentsValueWindow = new UICellContentsValueWindow(this);
                }
                return this.mUICellContentsValueWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellValueBoxWindow UICellValueBoxWindow
        {
            get
            {
                if ((this.mUICellValueBoxWindow == null))
                {
                    this.mUICellValueBoxWindow = new UICellValueBoxWindow(this);
                }
                return this.mUICellValueBoxWindow;
            }
        }
        
        public UIAWindow UIAWindow
        {
            get
            {
                if ((this.mUIAWindow == null))
                {
                    this.mUIAWindow = new UIAWindow(this);
                }
                return this.mUIAWindow;
            }
        }
        
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsValueWindow mUICellContentsValueWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UICellValueBoxWindow mUICellValueBoxWindow;
        
        private UIAWindow mUIAWindow;
        
        private UIItem1Window mUIItem1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICellContentsValueWindow : WinWindow
    {
        
        public UICellContentsValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsValue";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsValueEdit
        {
            get
            {
                if ((this.mUICellContentsValueEdit == null))
                {
                    this.mUICellContentsValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Contents:";
                    this.mUICellContentsValueEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentsValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICellValueBoxWindow : WinWindow
    {
        
        public UICellValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueBoxEdit
        {
            get
            {
                if ((this.mUICellValueBoxEdit == null))
                {
                    this.mUICellValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell value:";
                    this.mUICellValueBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAWindow : WinWindow
    {
        
        public UIAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "columnValue";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIColumnValueEdit
        {
            get
            {
                if ((this.mUIColumnValueEdit == null))
                {
                    this.mUIColumnValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIColumnValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Column:";
                    this.mUIColumnValueEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIColumnValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIColumnValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "rowValue";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIRowValueEdit
        {
            get
            {
                if ((this.mUIRowValueEdit == null))
                {
                    this.mUIRowValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIRowValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Row:";
                    this.mUIRowValueEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIRowValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIRowValueEdit;
        #endregion
    }
}
